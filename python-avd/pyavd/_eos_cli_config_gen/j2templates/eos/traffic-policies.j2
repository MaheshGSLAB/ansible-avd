{#
 Copyright (c) 2023-2024 Arista Networks, Inc.
 Use of this source code is governed by the Apache License 2.0
 that can be found in the LICENSE file.
#}
{# eos - traffic policies #}
{% if traffic_policies is arista.avd.defined %}
!
traffic-policies
{# FIELD SET #}
{#     -- L4 PORT MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ports is arista.avd.defined %}
{%         for field_set_port in traffic_policies.field_sets.ports %}
   field-set l4-port {{ field_set_port.name }}
      {{ field_set_port.port_range }}
   !
{%         endfor %}
{%     endif %}
{#     -- IPv4 PREFIX MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ipv4 is arista.avd.defined %}
{%         for field_set_ipv4 in traffic_policies.field_sets.ipv4 %}
{%             if field_set_ipv4.name is arista.avd.defined %}
   field-set ipv4 prefix {{ field_set_ipv4.name }}
{%                 if field_set_ipv4.prefixes is arista.avd.defined %}
      {{ field_set_ipv4.prefixes | arista.avd.natural_sort | join(' ') }}
{%                 endif %}
{%             endif %}
   !
{%         endfor %}
{%     endif %}
{#     -- IPv6 PREFIX MANAGEMENT -- #}
{%     if traffic_policies.field_sets.ipv6 is arista.avd.defined %}
{%         for field_set_ipv6 in traffic_policies.field_sets.ipv6 %}
{%             if field_set_ipv6.name is arista.avd.defined %}
   field-set ipv6 prefix {{ field_set_ipv6.name }}
{%                 if field_set_ipv6.prefixes is arista.avd.defined %}
      {{ field_set_ipv6.prefixes | arista.avd.natural_sort | join(' ') }}
{%                 endif %}
{%             endif %}
   !
{%         endfor %}
{%     endif %}
{# Global options #}
{%     if traffic_policies.options.counter_per_interface is arista.avd.defined(true) %}
   counter interface per-interface ingress
   !
{%     endif %}
{# TRAFFIC POLICIES #}
{%     if traffic_policies.policies is arista.avd.defined %}
{%         for policy in traffic_policies.policies %}
   traffic-policy {{ policy.name }}
{%             if policy.matches is arista.avd.defined %}
{# COUNTER CREATION SECTION #}
{%                 set transient_values = namespace() %}
{%                 set transient_values.counters = [] %}
{%                 for match in policy.matches %}
{%                     if match.actions.count is arista.avd.defined %}
{%                         do transient_values.counters.append(match.actions.count | string) %}
{%                     endif %}
{%                 endfor %}
{%                 if transient_values.counters | length > 0 %}
      counter {{ transient_values.counters | arista.avd.natural_sort | join(' ') }}
      !
{%                 endif %}
{# MATCH SECTION #}
{%                 for match in policy.matches %}
      match {{ match.name }} {{ match.type | lower }}
{#                     -- SOURCE PREFIX MANAGEMENT -- #}
{%                     if match.source.prefixes is arista.avd.defined %}
         source prefix {{ match.source.prefixes | arista.avd.natural_sort | join(' ') }}
{%                     elif match.source.prefix_lists is arista.avd.defined %}
         source prefix field-set {{ match.source.prefix_lists | arista.avd.natural_sort | join(' ') }}
{%                     endif %}
{#                     -- DESTINATION PREFIX MANAGEMENT -- #}
{%                     if match.destination.prefixes is arista.avd.defined %}
         destination prefix {{ match.destination.prefixes | arista.avd.natural_sort | join(' ') }}
{%                     elif match.destination.prefix_lists is arista.avd.defined %}
         destination prefix field-set {{ match.destination.prefix_lists | arista.avd.natural_sort | join(' ') }}
{%                     endif %}
{#                     -- PROTOCOL MANAGEMENT -- #}
{%                     if match.protocols is arista.avd.defined %}
{%                         set flags = {'bgp': False, 'neighbors': False, 'all': False} %}
{%                         for protocol in match.protocols %}
{%                             if protocol.protocol is arista.avd.defined and protocol.protocol not in ['neighbors', 'bgp'] and not flags.bgp and not flags.neighbors %}
{%                                 set _ = flags.update({'tcp': True}) %}
{%                                 set protocol_cli = 'protocol ' ~ protocol.protocol %}
{%                                 if protocol.flags is arista.avd.defined and protocol.protocol | lower == 'tcp' %}
{%                                     for flag in protocol.flags %}
         {{ protocol_cli }} flags {{ flag }}
{%                                     endfor %}
{%                                 endif %}
{#                                 -- source/destination port-list -- #}
{%                                 if protocol.src_port is arista.avd.defined and protocol.dst_port is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} source port {{ protocol.src_port }} destination port {{ protocol.dst_port }}
{%                                 elif protocol.src_port is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} source port {{ protocol.src_port }}
{%                                 elif protocol.dst_port is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} destination port {{ protocol.dst_port }}
{%                                 endif %}
{#                                 -- source/destination field-set -- #}
{%                                 if protocol.src_field is arista.avd.defined and protocol.dst_field is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} source port field-set {{ protocol.src_field }} destination port field-set {{ protocol.dst_field }}
{%                                 elif protocol.src_field is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} source port field-set {{ protocol.src_field }}
{%                                 elif protocol.dst_field is arista.avd.defined and protocol.protocol | lower in ['tcp','udp'] %}
         {{ protocol_cli }} destination port field-set {{ protocol.dst_field }}
{%                                 endif %}
{%                                 if protocol.icmp_type is arista.avd.defined and protocol.protocol | lower == 'icmp' %}
         {{ protocol_cli }} type {{ protocol.icmp_type | arista.avd.natural_sort | join(' ') }} code all
{%                                 endif %}
{%                                 if protocol.protocol is arista.avd.defined and protocol.icmp_type is not arista.avd.defined and protocol.dst_field is not arista.avd.defined and protocol.src_field is not arista.avd.defined and protocol.dst_port is not arista.avd.defined and protocol.src_port is not arista.avd.defined and protocol.flags is not arista.avd.defined %}
         {{ protocol_cli }}
{%                                 endif %}
{%                             elif protocol.protocol is arista.avd.defined and protocol.protocol | lower == 'neighbors' and not flags.bgp and not flags.all %}
         protocol neighbors bgp
{%                                 set _ = flags.update({'neighbors': True}) %}
{%                             elif protocol.protocol is arista.avd.defined and protocol.protocol | lower == 'bgp' and not flags.neighbors and not flags.all %}
         protocol bgp
{%                                 set _ = flags.update({'bgp': True}) %}
{%                             endif %}
{%                         endfor %}
{%                     endif %}
{#                     -- TTL MANAGEMENT -- #}
{%                     if match.ttl is arista.avd.defined %}
         ttl {{ match.ttl }}
{%                     endif %}
{#                     -- FRAGMENT MANAGEMENT -- #}
{%                     if match.fragment.offset is arista.avd.defined %}
         fragment offset {{ match.fragment.offset }}
{%                     elif  match.fragment is defined %}
         fragment
{%                     endif %}
{#       -- ACTIONS SECTION -- #}
{%                     if match.actions.count is arista.avd.defined or match.actions.traffic_class is arista.avd.defined or match.actions.dscp is arista.avd.defined or match.actions.drop is arista.avd.defined(true)  %}
         !
         actions
{#                         -- COUNT packets -- #}
{%                         if match.actions.count is arista.avd.defined %}
            count {{ match.actions.count }}
{%                         endif %}
{#                         -- DROP Action -- #}
{%                         if match.actions.drop is arista.avd.defined(true) %}
            drop
{#                             -- LOGGING only if DROP is set-- #}
{%                             if match.actions.log is arista.avd.defined(true) %}
            log
{%                             endif %}
{%                         endif %}
{#                         -- DSCP -- #}
{%                         if match.actions.dscp is arista.avd.defined %}
            set dscp {{ match.actions.dscp }}
{%                         endif %}
{#                         -- Traffic Class -- #}
{%                         if match.actions.traffic_class is arista.avd.defined %}
            set traffic class {{ match.actions.traffic_class }}
{%                         endif %}
{%                     endif %}
{# END OF MATCH Section #}
      !
{%                 endfor %}
{%             endif %}
{# DEFAULT MATCH Section #}
      match ipv4-all-default ipv4
{%             if policy.default_actions.ipv4 is arista.avd.defined %}
         actions
{#                 -- COUNT packets ipv4 -- #}
{%                 if policy.default_actions.ipv4.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv4.count }}
{%                 endif %}
{#                 -- DROP Action ipv4 -- #}
{%                 if policy.default_actions.ipv4.drop is arista.avd.defined(true) %}
            drop
{#                     -- LOGGING ipv4 only if DROP is set-- #}
{%                     if policy.default_actions.ipv4.log is arista.avd.defined(true) %}
            log
{%                     endif %}
{%                 endif %}
{#                 -- DSCP ipv4 -- #}
{%                 if policy.default_actions.ipv4.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv4.dscp }}
{%                 endif %}
{#                 -- Traffic Class ipv4 -- #}
{%                 if policy.default_actions.ipv4.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv4.traffic_class }}
{%                 endif %}
{%             endif %}
      !
      match ipv6-all-default ipv6
{%             if policy.default_actions.ipv6 is arista.avd.defined %}
         actions
{#                 -- COUNT packets ipv6 -- #}
{%                 if policy.default_actions.ipv6.count is arista.avd.defined %}
            count {{ policy.default_actions.ipv6.count }}
{%                 endif %}
{#                 -- DROP Action ipv6 -- #}
{%                 if policy.default_actions.ipv6.drop is arista.avd.defined(true) %}
            drop
{#                     -- LOGGING ipv6 only if DROP is set-- #}
{%                     if policy.default_actions.ipv6.log is arista.avd.defined(true) %}
            log
{%                     endif %}
{%                 endif %}
{#                 -- DSCP ipv6 -- #}
{%                 if policy.default_actions.ipv6.dscp is arista.avd.defined %}
            set dscp {{ policy.default_actions.ipv6.dscp }}
{%                 endif %}
{#                 -- Traffic Class ipv6 -- #}
{%                 if policy.default_actions.ipv6.traffic_class is arista.avd.defined %}
            set traffic class {{ policy.default_actions.ipv6.traffic_class }}
{%                 endif %}
{%             endif %}
{# END of DEFAULT MATCH Section #}
   !
{%         endfor %}
{%     endif %}
{% endif %}
